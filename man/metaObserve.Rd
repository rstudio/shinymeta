% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/observe.R
\name{metaObserve}
\alias{metaObserve}
\alias{metaObserve2}
\title{Create a meta-reactive observer}
\usage{
metaObserve(expr, env = parent.frame(), quoted = FALSE, label = NULL,
  domain = getDefaultReactiveDomain(), localize = "auto",
  bindToReturn = FALSE)

metaObserve2(expr, env = parent.frame(), quoted = FALSE,
  label = NULL, domain = getDefaultReactiveDomain())
}
\arguments{
\item{expr}{An expression (quoted or unquoted).}

\item{env}{The parent environment for the reactive expression. By default,
this is the calling environment, the same as when defining an ordinary
non-reactive expression.}

\item{quoted}{Is the expression quoted? By default, this is \code{FALSE}.
This is useful when you want to use an expression that is stored in a
variable; to do so, it must be quoted with \code{quote()}.}

\item{label}{A label for the observer, useful for debugging.}

\item{domain}{See \link{domains}.}

\item{localize}{Whether or not to wrap the returned expression in \code{\link[=local]{local()}}.
The default, \code{"auto"}, only wraps expressions with a top-level \code{\link[=return]{return()}}
statement (i.e., return statements in anonymized functions are ignored).}

\item{bindToReturn}{For non-\code{localize}d expressions, should an assignment
of a meta expression be applied to the \emph{last child} of the top-level \code{\{} call?}
}
\description{
Create a \code{\link[=observe]{observe()}}r that, when invoked with meta-mode activated
(i.e. called within \code{\link[=withMetaMode]{withMetaMode()}} or \code{\link[=expandCode]{expandCode()}}), returns a
partially evaluated code expression. Outside of meta-mode,
\code{metaObserve()} is equivalent to \code{observe()}
(it fully evaluates the given expression).
}
\details{
If you wish to capture specific code inside of \code{expr} (e.g. ignore code
that has no meaning outside shiny, like \code{\link[=req]{req()}}), use \code{metaObserve2()} in combination
with \code{metaExpr()}. When using \code{metaObserve2()}, \code{expr} must return a \code{metaExpr()}.
}
\seealso{
\code{\link[=metaExpr]{metaExpr()}}
}
