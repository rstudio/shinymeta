% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metareactive.R
\name{metaReactive}
\alias{metaReactive}
\alias{metaReactive2}
\title{Create a meta-reactive expression}
\usage{
metaReactive(expr, env = parent.frame(), quoted = FALSE,
  varname = NULL, domain = shiny::getDefaultReactiveDomain(),
  inline = FALSE, localize = "auto", bindToReturn = FALSE)

metaReactive2(expr, env = parent.frame(), quoted = FALSE,
  varname = NULL, domain = shiny::getDefaultReactiveDomain(),
  inline = FALSE)
}
\arguments{
\item{expr}{An expression (quoted or unquoted).}

\item{env}{The parent environment for the reactive expression. By default,
this is the calling environment, the same as when defining an ordinary
non-reactive expression.}

\item{quoted}{Is the expression quoted? By default, this is \code{FALSE}.
This is useful when you want to use an expression that is stored in a
variable; to do so, it must be quoted with \code{quote()}.}

\item{varname}{An R variable name that this object prefers to be named when
its code is extracted into an R script. (See also: \code{\link[=expandChain]{expandChain()}})}

\item{domain}{See \link{domains}.}

\item{inline}{If \code{TRUE}, during code expansion, do not declare a variable for
this object; instead, inline the code into every call site. Use this to avoid
introducing variables for very simple expressions. (See also: \code{\link[=expandChain]{expandChain()}})}

\item{localize}{Whether or not to wrap the returned expression in \code{\link[=local]{local()}}.
The default, \code{"auto"}, only wraps expressions with a top-level \code{\link[=return]{return()}}
statement (i.e., return statements in anonymized functions are ignored).}

\item{bindToReturn}{For non-\code{localize}d expressions, should an assignment
of a meta expression be applied to the \emph{last child} of the top-level \code{\{} call?}
}
\description{
Create a \code{\link[=reactive]{reactive()}} that, when invoked with meta-mode activated
(i.e. called within \code{\link[=withMetaMode]{withMetaMode()}} or \code{\link[=expandChain]{expandChain()}}), returns a
code expression (instead of evaluating that expression and returning the value).
}
\details{
If you wish to capture specific code inside of \code{expr} (e.g. ignore code
that has no meaning outside shiny, like \code{\link[=req]{req()}}), use \code{metaReactive2()} in combination
with \code{metaExpr()}. When using \code{metaReactive2()}, \code{expr} must return a \code{metaExpr()}.

TODO: Document reasons why varname detection might fail.
}
\examples{

options(shiny.suppressMissingContextError = TRUE)

input <- list(x = 1)

y <- metaReactive({
  req(input$x)
  a <- !!input$x + 1
  b <- a + 1
  c + 1
})

withMetaMode(y())
expandChain(y())

y <- metaReactive2({
  req(input$x)

  metaExpr({
    a <- !!input$x + 1
    b <- a + 1
    c + 1
  }, bindToReturn = TRUE)
})

expandChain(y())

}
\seealso{
\code{\link[=metaExpr]{metaExpr()}}
}
